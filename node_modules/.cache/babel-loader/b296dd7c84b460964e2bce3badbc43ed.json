{"ast":null,"code":"import { useState } from 'react';\nimport { Modal } from '../../components';\nimport { StyledButton } from '../../components';\nimport { createEmptyArray } from '../../utils/utils';\nimport './tictactoe.css'; // export const Tictactoe = () => {\n//   //  Modal related\n//   const [modalOpen, setModalOpen] = useState(false);\n//   const openModal = () => setModalOpen(true);\n//   const closeModal = () => setModalOpen(false);\n//   // Game related\n//   const [turn, setTurn] = useState('x');\n//   const [cells, setCells] = useState(createEmptyArray(9).fill(''));\n//   const [winner, setWinner] = useState();\n//   const decideWinner = (squares) => {\n//     let combos = {\n//       across: [\n//         [0, 1, 2],\n//         [3, 4, 5],\n//         [6, 7, 8],\n//       ],\n//       down: [\n//         [0, 3, 6],\n//         [1, 4, 7],\n//         [2, 5, 8],\n//       ],\n//       diagonal: [\n//         [0, 4, 8],\n//         [2, 4, 6],\n//       ],\n//     };\n//     for (let combo in combos) {\n//       combos[combo].forEach((pattern) => {\n//         if (squares[pattern[0]] === '' || squares[pattern[1]] === '' || squares[pattern[2]] === '') {\n//           // do nothing\n//         } else if (squares[pattern[0]] === squares[pattern[1]] && squares[pattern[1]] === squares[pattern[2]]) {\n//           setWinner(squares[pattern[0]]);\n//         }\n//       });\n//     }\n//   };\n//   const handleClick = (num) => {\n//     if (cells[num] !== '') {\n//       return;\n//     }\n//     let squares = [...cells];\n//     // eslint-disable-next-line no-unused-expressions\n//     // turn === 'x' ? ((squares[num] = 'x'), setTurn('o')) : ((squares[num] = 'o'), setTurn('x'));\n//     if (turn === 'x') {\n//       squares[num] = 'x';\n//       setTurn('o');\n//     } else {\n//       squares[num] = 'o';\n//       setTurn('x');\n//     }\n//     decideWinner(squares);\n//     setCells(squares);\n//   };\n//   const handleRestart = () => {\n//     setWinner(null);\n//     setCells(createEmptyArray(9).fill(0));\n//   };\n//   const Cell = ({ num }) => {\n//     return <td onClick={() => handleClick(num)}>{cells[num]}</td>;\n//   };\n//   return (\n//     <>\n//       <StyledButton onClickButton={openModal} content={'틱택토 게임'} />\n//       <Modal open={modalOpen} close={closeModal} header='TicTacToe Game'>\n//         <div className='container'>\n//           <table>\n//             Turn : {turn}\n//             <tbody>\n//               <tr>\n//                 <Cell num={0} />\n//                 <Cell num={1} />\n//                 <Cell num={2} />\n//               </tr>\n//               <tr>\n//                 <Cell num={3} />\n//                 <Cell num={4} />\n//                 <Cell num={5} />\n//               </tr>\n//               <tr>\n//                 <Cell num={6} />\n//                 <Cell num={7} />\n//                 <Cell num={8} />\n//               </tr>\n//             </tbody>\n//           </table>\n//           {winner && (\n//             <>\n//               <p>{winner} is the winner!</p>\n//               <button onClick={() => handleRestart()}>Play Again</button>\n//             </>\n//           )}\n//         </div>\n//       </Modal>\n//     </>\n//   );\n// };","map":{"version":3,"names":["useState","Modal","StyledButton","createEmptyArray"],"sources":["/Users/leezer/Desktop/codeStates/REACT_TYPESCRIPT_STUDY/react-study/src/pages/Tictactoe/Tictactoe.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { Modal } from '../../components';\nimport { StyledButton } from '../../components';\nimport { createEmptyArray } from '../../utils/utils';\nimport './tictactoe.css';\n\n// export const Tictactoe = () => {\n//   //  Modal related\n//   const [modalOpen, setModalOpen] = useState(false);\n//   const openModal = () => setModalOpen(true);\n//   const closeModal = () => setModalOpen(false);\n\n//   // Game related\n\n//   const [turn, setTurn] = useState('x');\n//   const [cells, setCells] = useState(createEmptyArray(9).fill(''));\n//   const [winner, setWinner] = useState();\n\n//   const decideWinner = (squares) => {\n//     let combos = {\n//       across: [\n//         [0, 1, 2],\n//         [3, 4, 5],\n//         [6, 7, 8],\n//       ],\n//       down: [\n//         [0, 3, 6],\n//         [1, 4, 7],\n//         [2, 5, 8],\n//       ],\n//       diagonal: [\n//         [0, 4, 8],\n//         [2, 4, 6],\n//       ],\n//     };\n\n//     for (let combo in combos) {\n//       combos[combo].forEach((pattern) => {\n//         if (squares[pattern[0]] === '' || squares[pattern[1]] === '' || squares[pattern[2]] === '') {\n//           // do nothing\n//         } else if (squares[pattern[0]] === squares[pattern[1]] && squares[pattern[1]] === squares[pattern[2]]) {\n//           setWinner(squares[pattern[0]]);\n//         }\n//       });\n//     }\n//   };\n\n//   const handleClick = (num) => {\n//     if (cells[num] !== '') {\n//       return;\n//     }\n\n//     let squares = [...cells];\n\n//     // eslint-disable-next-line no-unused-expressions\n//     // turn === 'x' ? ((squares[num] = 'x'), setTurn('o')) : ((squares[num] = 'o'), setTurn('x'));\n\n//     if (turn === 'x') {\n//       squares[num] = 'x';\n//       setTurn('o');\n//     } else {\n//       squares[num] = 'o';\n//       setTurn('x');\n//     }\n\n//     decideWinner(squares);\n//     setCells(squares);\n//   };\n\n//   const handleRestart = () => {\n//     setWinner(null);\n//     setCells(createEmptyArray(9).fill(0));\n//   };\n\n//   const Cell = ({ num }) => {\n//     return <td onClick={() => handleClick(num)}>{cells[num]}</td>;\n//   };\n\n//   return (\n//     <>\n//       <StyledButton onClickButton={openModal} content={'틱택토 게임'} />\n//       <Modal open={modalOpen} close={closeModal} header='TicTacToe Game'>\n//         <div className='container'>\n//           <table>\n//             Turn : {turn}\n//             <tbody>\n//               <tr>\n//                 <Cell num={0} />\n//                 <Cell num={1} />\n//                 <Cell num={2} />\n//               </tr>\n//               <tr>\n//                 <Cell num={3} />\n//                 <Cell num={4} />\n//                 <Cell num={5} />\n//               </tr>\n//               <tr>\n//                 <Cell num={6} />\n//                 <Cell num={7} />\n//                 <Cell num={8} />\n//               </tr>\n//             </tbody>\n//           </table>\n//           {winner && (\n//             <>\n//               <p>{winner} is the winner!</p>\n//               <button onClick={() => handleRestart()}>Play Again</button>\n//             </>\n//           )}\n//         </div>\n//       </Modal>\n//     </>\n//   );\n// };\n"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,gBAAT,QAAiC,mBAAjC;AACA,OAAO,iBAAP,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}