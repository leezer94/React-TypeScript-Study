{"ast":null,"code":"export const getRightEqualSignLetter = number => {\n  const equalSigns = ['는', '은'];\n  const neunNums = [2, 4, 5, 9];\n  return neunNums.includes(number) ? equalSigns[0] : equalSigns[1];\n};\nexport const clearInputValue = function () {\n  for (var _len = arguments.length, inputs = new Array(_len), _key = 0; _key < _len; _key++) {\n    inputs[_key] = arguments[_key];\n  }\n\n  inputs.map(input => input.current.value = '');\n};\nexport const createEmptyArray = length => {\n  return Array.from({\n    length: length\n  }, (v, i) => i++);\n};\nexport const compareTwoArrays = (targetNumber, currentValue) => {\n  // 스트링 mdn 찾아보기\n  targetNumber = Array.from(targetNumber);\n  currentValue = currentValue.split('').map(Number);\n  let [strikeCount, ballCount] = Array.from({\n    length: 2\n  }, num => num = 0);\n\n  for (let i = 0; i < currentValue.length; i++) {\n    if (targetNumber[i] === currentValue[i]) {\n      strikeCount++;\n    } else if (currentValue.includes(targetNumber[i])) {\n      ballCount++;\n    }\n  }\n\n  return [strikeCount, ballCount];\n};","map":{"version":3,"names":["getRightEqualSignLetter","number","equalSigns","neunNums","includes","clearInputValue","inputs","map","input","current","value","createEmptyArray","length","Array","from","v","i","compareTwoArrays","targetNumber","currentValue","split","Number","strikeCount","ballCount","num"],"sources":["/Users/leezer/Desktop/codeStates/REACT_TYPESCRIPT_STUDY/react-study/src/utils/utils.js"],"sourcesContent":["export const getRightEqualSignLetter = (number) => {\n  const equalSigns = ['는', '은'];\n  const neunNums = [2, 4, 5, 9];\n\n  return neunNums.includes(number) ? equalSigns[0] : equalSigns[1];\n};\n\nexport const clearInputValue = (...inputs) => {\n  inputs.map((input) => (input.current.value = ''));\n};\n\nexport const createEmptyArray = (length) => {\n  return Array.from({ length: length }, (v, i) => i++);\n};\n\nexport const compareTwoArrays = (targetNumber, currentValue) => {\n  // 스트링 mdn 찾아보기\n  targetNumber = Array.from(targetNumber);\n  currentValue = currentValue.split('').map(Number);\n\n  let [strikeCount, ballCount] = Array.from({ length: 2 }, (num) => (num = 0));\n\n  for (let i = 0; i < currentValue.length; i++) {\n    if (targetNumber[i] === currentValue[i]) {\n      strikeCount++;\n    } else if (currentValue.includes(targetNumber[i])) {\n      ballCount++;\n    }\n  }\n\n  return [strikeCount, ballCount];\n};\n"],"mappings":"AAAA,OAAO,MAAMA,uBAAuB,GAAIC,MAAD,IAAY;EACjD,MAAMC,UAAU,GAAG,CAAC,GAAD,EAAM,GAAN,CAAnB;EACA,MAAMC,QAAQ,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAjB;EAEA,OAAOA,QAAQ,CAACC,QAAT,CAAkBH,MAAlB,IAA4BC,UAAU,CAAC,CAAD,CAAtC,GAA4CA,UAAU,CAAC,CAAD,CAA7D;AACD,CALM;AAOP,OAAO,MAAMG,eAAe,GAAG,YAAe;EAAA,kCAAXC,MAAW;IAAXA,MAAW;EAAA;;EAC5CA,MAAM,CAACC,GAAP,CAAYC,KAAD,IAAYA,KAAK,CAACC,OAAN,CAAcC,KAAd,GAAsB,EAA7C;AACD,CAFM;AAIP,OAAO,MAAMC,gBAAgB,GAAIC,MAAD,IAAY;EAC1C,OAAOC,KAAK,CAACC,IAAN,CAAW;IAAEF,MAAM,EAAEA;EAAV,CAAX,EAA+B,CAACG,CAAD,EAAIC,CAAJ,KAAUA,CAAC,EAA1C,CAAP;AACD,CAFM;AAIP,OAAO,MAAMC,gBAAgB,GAAG,CAACC,YAAD,EAAeC,YAAf,KAAgC;EAC9D;EACAD,YAAY,GAAGL,KAAK,CAACC,IAAN,CAAWI,YAAX,CAAf;EACAC,YAAY,GAAGA,YAAY,CAACC,KAAb,CAAmB,EAAnB,EAAuBb,GAAvB,CAA2Bc,MAA3B,CAAf;EAEA,IAAI,CAACC,WAAD,EAAcC,SAAd,IAA2BV,KAAK,CAACC,IAAN,CAAW;IAAEF,MAAM,EAAE;EAAV,CAAX,EAA2BY,GAAD,IAAUA,GAAG,GAAG,CAA1C,CAA/B;;EAEA,KAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGG,YAAY,CAACP,MAAjC,EAAyCI,CAAC,EAA1C,EAA8C;IAC5C,IAAIE,YAAY,CAACF,CAAD,CAAZ,KAAoBG,YAAY,CAACH,CAAD,CAApC,EAAyC;MACvCM,WAAW;IACZ,CAFD,MAEO,IAAIH,YAAY,CAACf,QAAb,CAAsBc,YAAY,CAACF,CAAD,CAAlC,CAAJ,EAA4C;MACjDO,SAAS;IACV;EACF;;EAED,OAAO,CAACD,WAAD,EAAcC,SAAd,CAAP;AACD,CAhBM"},"metadata":{},"sourceType":"module"}