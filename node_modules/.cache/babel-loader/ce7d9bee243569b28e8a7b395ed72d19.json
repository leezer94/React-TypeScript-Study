{"ast":null,"code":"export const isValidInputWord = errorMessage => {\n  let isValid = false;\n\n  if (!errorMessage) {\n    isValid = true;\n  }\n\n  return isValid;\n}; // here needs to be fixed\n\nexport const isValidNumberTypeInput = (input, sum, type) => {\n  const inputValue = input.current.value;\n  let isValid = false;\n\n  if (!isNaN(inputValue) && sum === type(inputValue)) {\n    isValid = true;\n  }\n\n  return isValid;\n}; // here needs to be fixed\n\nexport const getErrorMessages = (input, tryLog, lengthOfArray) => {\n  const inputValue = input.current.value;\n  const inputValueArr = inputValue.split('').map(Number);\n  const messageList = new Set();\n\n  if (inputValueArr.length !== lengthOfArray) {\n    messageList.add(`${lengthOfArray}자리 수를 입력해 주세요.`);\n  }\n\n  if (inputValueArr.includes(0)) {\n    messageList.add('1 ~ 9 사이의 수만 입력이 가능합니다.');\n  }\n\n  if (new Set(inputValueArr).size !== lengthOfArray && new Set(inputValueArr).size < lengthOfArray) {\n    messageList.add('중복되지 않는 수를 입력해 주세요.');\n  }\n\n  if (inputValueArr.some(isNaN)) {\n    messageList.add('숫자만 입력이 가능합니다.');\n  }\n\n  if (tryLog.includes(inputValue)) {\n    messageList.add('이미 입력했던 숫자 입니다.');\n  }\n\n  return messageList;\n};","map":{"version":3,"names":["isValidInputWord","errorMessage","isValid","isValidNumberTypeInput","input","sum","type","inputValue","current","value","isNaN","getErrorMessages","tryLog","lengthOfArray","inputValueArr","split","map","Number","messageList","Set","length","add","includes","size","some"],"sources":["/Users/leezer/Desktop/codeStates/REACT_TYPESCRIPT_STUDY/react-study/src/utils/validator.tsx"],"sourcesContent":["export const isValidInputWord: (bool: booleamn) => boolean = (errorMessage: []) => {\n  let isValid = false;\n\n  if (!errorMessage) {\n    isValid = true;\n  }\n\n  return isValid;\n};\n\n// here needs to be fixed\nexport const isValidNumberTypeInput = (input: any, sum: number, type: any) => {\n  const inputValue = input.current.value;\n\n  let isValid = false;\n\n  if (!isNaN(inputValue) && sum === type(inputValue)) {\n    isValid = true;\n  }\n\n  return isValid;\n};\n\n// here needs to be fixed\nexport const getErrorMessages = (input: any, tryLog: number[], lengthOfArray: number) => {\n  const inputValue: any = input.current.value;\n  const inputValueArr: number[] = inputValue.split('').map(Number);\n\n  const messageList = new Set();\n\n  if (inputValueArr.length !== lengthOfArray) {\n    messageList.add(`${lengthOfArray}자리 수를 입력해 주세요.`);\n  }\n\n  if (inputValueArr.includes(0)) {\n    messageList.add('1 ~ 9 사이의 수만 입력이 가능합니다.');\n  }\n\n  if (new Set(inputValueArr).size !== lengthOfArray && new Set(inputValueArr).size < lengthOfArray) {\n    messageList.add('중복되지 않는 수를 입력해 주세요.');\n  }\n\n  if (inputValueArr.some(isNaN)) {\n    messageList.add('숫자만 입력이 가능합니다.');\n  }\n\n  if (tryLog.includes(inputValue)) {\n    messageList.add('이미 입력했던 숫자 입니다.');\n  }\n\n  return messageList;\n};\n"],"mappings":"AAAA,OAAO,MAAMA,gBAA6C,GAAIC,YAAD,IAAsB;EACjF,IAAIC,OAAO,GAAG,KAAd;;EAEA,IAAI,CAACD,YAAL,EAAmB;IACjBC,OAAO,GAAG,IAAV;EACD;;EAED,OAAOA,OAAP;AACD,CARM,C,CAUP;;AACA,OAAO,MAAMC,sBAAsB,GAAG,CAACC,KAAD,EAAaC,GAAb,EAA0BC,IAA1B,KAAwC;EAC5E,MAAMC,UAAU,GAAGH,KAAK,CAACI,OAAN,CAAcC,KAAjC;EAEA,IAAIP,OAAO,GAAG,KAAd;;EAEA,IAAI,CAACQ,KAAK,CAACH,UAAD,CAAN,IAAsBF,GAAG,KAAKC,IAAI,CAACC,UAAD,CAAtC,EAAoD;IAClDL,OAAO,GAAG,IAAV;EACD;;EAED,OAAOA,OAAP;AACD,CAVM,C,CAYP;;AACA,OAAO,MAAMS,gBAAgB,GAAG,CAACP,KAAD,EAAaQ,MAAb,EAA+BC,aAA/B,KAAyD;EACvF,MAAMN,UAAe,GAAGH,KAAK,CAACI,OAAN,CAAcC,KAAtC;EACA,MAAMK,aAAuB,GAAGP,UAAU,CAACQ,KAAX,CAAiB,EAAjB,EAAqBC,GAArB,CAAyBC,MAAzB,CAAhC;EAEA,MAAMC,WAAW,GAAG,IAAIC,GAAJ,EAApB;;EAEA,IAAIL,aAAa,CAACM,MAAd,KAAyBP,aAA7B,EAA4C;IAC1CK,WAAW,CAACG,GAAZ,CAAiB,GAAER,aAAc,gBAAjC;EACD;;EAED,IAAIC,aAAa,CAACQ,QAAd,CAAuB,CAAvB,CAAJ,EAA+B;IAC7BJ,WAAW,CAACG,GAAZ,CAAgB,yBAAhB;EACD;;EAED,IAAI,IAAIF,GAAJ,CAAQL,aAAR,EAAuBS,IAAvB,KAAgCV,aAAhC,IAAiD,IAAIM,GAAJ,CAAQL,aAAR,EAAuBS,IAAvB,GAA8BV,aAAnF,EAAkG;IAChGK,WAAW,CAACG,GAAZ,CAAgB,qBAAhB;EACD;;EAED,IAAIP,aAAa,CAACU,IAAd,CAAmBd,KAAnB,CAAJ,EAA+B;IAC7BQ,WAAW,CAACG,GAAZ,CAAgB,gBAAhB;EACD;;EAED,IAAIT,MAAM,CAACU,QAAP,CAAgBf,UAAhB,CAAJ,EAAiC;IAC/BW,WAAW,CAACG,GAAZ,CAAgB,iBAAhB;EACD;;EAED,OAAOH,WAAP;AACD,CA3BM"},"metadata":{},"sourceType":"module"}