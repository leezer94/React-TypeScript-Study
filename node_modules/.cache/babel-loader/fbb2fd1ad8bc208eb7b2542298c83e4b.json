{"ast":null,"code":"import _slicedToArray from\"/Users/leezer/Desktop/codeStates/REACT_TYPESCRIPT_STUDY/react-study/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useRef,useState}from'react';import{Form,P,Input,Button}from'../../components';import{CLASSNAME,COLOR}from'../../common/constants/constants';import{getRightEqualSignLetter,clearInputValue,isValidNumberTypeInput}from'../../utils';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var MultiplicationMainContainer=function MultiplicationMainContainer(props){var state=props.state,updateStateNumbers=props.updateStateNumbers,evaluation=props.evaluation,handleEvaluation=props.handleEvaluation;var _useState=useState(true),_useState2=_slicedToArray(_useState,2),isNumberType=_useState2[0],setIsNumberType=_useState2[1];// Ref\nvar multiplicationInput=useRef(null);var multiplicationForm=useRef(null);var notANumberMessage=useRef(null);var incorrectMessage=useRef(null);// handlers\nvar firstNumber=state.firstNumber,secondNumber=state.secondNumber,sum=state.sum;var onClickSubmitButton=function onClickSubmitButton(){isNumberTypeInputValue(multiplicationInput);isValidNumberTypeInput(multiplicationInput,sum,Number)?updateStateNumbers():handleEvaluation(false);clearInputValue(multiplicationInput);};var isNumberTypeInputValue=function isNumberTypeInputValue(input){isNaN(input.current.value)?setIsNumberType(false):setIsNumberType(true);};var handleKeyPressEvent=function handleKeyPressEvent(e){return e.key==='Enter'?handleNumberSubmit(e):undefined;};var handleNumberSubmit=function handleNumberSubmit(e){e.preventDefault();onClickSubmitButton();};return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(Form,{ref:multiplicationForm,onSubmit:handleNumberSubmit,children:[/*#__PURE__*/_jsx(P,{content:\"\".concat(firstNumber,\" \\uACF1\\uD558\\uAE30 \").concat(secondNumber,\" \").concat(getRightEqualSignLetter(secondNumber),\"?\"),className:'',style:{}}),/*#__PURE__*/_jsx(Input,{type:'text',ref:multiplicationInput,onKeyPressEvent:handleKeyPressEvent}),/*#__PURE__*/_jsx(Button,{type:'submit',content:'입력',className:''}),/*#__PURE__*/_jsx(P,{className:!evaluation?'':CLASSNAME.HIDE,ref:incorrectMessage,style:{color:COLOR.RED},content:\"\\uC815\\uB2F5\\uC774 \\uC544\\uB2D9\\uB2C8\\uB2E4.\"}),/*#__PURE__*/_jsx(P,{className:!isNumberType?'':CLASSNAME.HIDE,ref:notANumberMessage,style:{color:COLOR.RED},content:'숫자만 입력이 가능합니다.'})]})});};export default MultiplicationMainContainer;","map":{"version":3,"names":["React","useRef","useState","Form","P","Input","Button","CLASSNAME","COLOR","getRightEqualSignLetter","clearInputValue","isValidNumberTypeInput","MultiplicationMainContainer","props","state","updateStateNumbers","evaluation","handleEvaluation","isNumberType","setIsNumberType","multiplicationInput","multiplicationForm","notANumberMessage","incorrectMessage","firstNumber","secondNumber","sum","onClickSubmitButton","isNumberTypeInputValue","Number","input","isNaN","current","value","handleKeyPressEvent","e","key","handleNumberSubmit","undefined","preventDefault","HIDE","color","RED"],"sources":["/Users/leezer/Desktop/codeStates/REACT_TYPESCRIPT_STUDY/react-study/src/pages/multiplication-table/Game-main-container.tsx"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport { Form, P, Input, Button } from '../../components';\nimport { CLASSNAME, COLOR } from '../../common/constants/constants';\nimport { getRightEqualSignLetter, clearInputValue, isValidNumberTypeInput } from '../../utils';\n\ntype state = {\n  firstNumber: number;\n  secondNumber: number;\n  sum: number;\n};\n\ntype props = {\n  state: state;\n  updateStateNumbers: () => void;\n  evaluation: boolean;\n  handleEvaluation: (bool: boolean) => void;\n};\n\nconst MultiplicationMainContainer = (props: props) => {\n  const { state, updateStateNumbers, evaluation, handleEvaluation } = props;\n  const [isNumberType, setIsNumberType] = useState(true);\n\n  // Ref\n  const multiplicationInput = useRef<HTMLInputElement>(null);\n  const multiplicationForm = useRef<HTMLFormElement>(null);\n  const notANumberMessage = useRef<HTMLParagraphElement>(null);\n  const incorrectMessage = useRef<HTMLParagraphElement>(null);\n\n  // handlers\n\n  const { firstNumber, secondNumber, sum } = state;\n\n  const onClickSubmitButton = (): void => {\n    isNumberTypeInputValue(multiplicationInput);\n    isValidNumberTypeInput(multiplicationInput, sum, Number) ? updateStateNumbers() : handleEvaluation(false);\n    clearInputValue(multiplicationInput);\n  };\n\n  const isNumberTypeInputValue = (input: any): void => {\n    isNaN(input.current.value) ? setIsNumberType(false) : setIsNumberType(true);\n  };\n\n  const handleKeyPressEvent = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    return e.key === 'Enter' ? handleNumberSubmit(e) : undefined;\n  };\n\n  const handleNumberSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    onClickSubmitButton();\n  };\n\n  return (\n    <>\n      <Form ref={multiplicationForm} onSubmit={handleNumberSubmit}>\n        <P content={`${firstNumber} 곱하기 ${secondNumber} ${getRightEqualSignLetter(secondNumber)}?`} className={''} style={{}}></P>\n        <Input type={'text'} ref={multiplicationInput} onKeyPressEvent={handleKeyPressEvent} />\n        <Button type={'submit'} content={'입력'} className={''}></Button>\n        <P className={!evaluation ? '' : CLASSNAME.HIDE} ref={incorrectMessage} style={{ color: COLOR.RED }} content={`정답이 아닙니다.`} />\n        <P className={!isNumberType ? '' : CLASSNAME.HIDE} ref={notANumberMessage} style={{ color: COLOR.RED }} content={'숫자만 입력이 가능합니다.'} />\n      </Form>\n    </>\n  );\n};\n\nexport default MultiplicationMainContainer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}