{"ast":null,"code":"var _jsxFileName = \"/Users/leezer/Desktop/codeStates/REACT_TYPESCRIPT_STUDY/react-study/src/pages/Tictactoe/Tictactoe.jsx\",\n    _s = $RefreshSig$();\n\n// import { useState } from 'react';\n// import { Modal } from '../../components';\n// import { StyledButton } from '../../components';\n// import { createEmptyArray } from '../../utils/utils';\n// import './tictactoe.css';\n// export const Tictactoe = () => {\n//   //  Modal related\n//   const [modalOpen, setModalOpen] = useState(false);\n//   const openModal = () => setModalOpen(true);\n//   const closeModal = () => setModalOpen(false);\n//   // Game related\n//   const [turn, setTurn] = useState('x');\n//   const [cells, setCells] = useState(createEmptyArray(9).fill(''));\n//   const [winner, setWinner] = useState();\n//   const decideWinner = (squares) => {\n//     let combos = {\n//       across: [\n//         [0, 1, 2],\n//         [3, 4, 5],\n//         [6, 7, 8],\n//       ],\n//       down: [\n//         [0, 3, 6],\n//         [1, 4, 7],\n//         [2, 5, 8],\n//       ],\n//       diagonal: [\n//         [0, 4, 8],\n//         [2, 4, 6],\n//       ],\n//     };\n//     for (let combo in combos) {\n//       combos[combo].forEach((pattern) => {\n//         if (squares[pattern[0]] === '' || squares[pattern[1]] === '' || squares[pattern[2]] === '') {\n//           // do nothing\n//         } else if (squares[pattern[0]] === squares[pattern[1]] && squares[pattern[1]] === squares[pattern[2]]) {\n//           setWinner(squares[pattern[0]]);\n//         }\n//       });\n//     }\n//   };\n//   const handleClick = (num) => {\n//     if (cells[num] !== '') {\n//       return;\n//     }\n//     let squares = [...cells];\n//     // eslint-disable-next-line no-unused-expressions\n//     // turn === 'x' ? ((squares[num] = 'x'), setTurn('o')) : ((squares[num] = 'o'), setTurn('x'));\n//     if (turn === 'x') {\n//       squares[num] = 'x';\n//       setTurn('o');\n//     } else {\n//       squares[num] = 'o';\n//       setTurn('x');\n//     }\n//     decideWinner(squares);\n//     setCells(squares);\n//   };\n//   const handleRestart = () => {\n//     setWinner(null);\n//     setCells(createEmptyArray(9).fill(0));\n//   };\n//   const Cell = ({ num }) => {\n//     return <td onClick={() => handleClick(num)}>{cells[num]}</td>;\n//   };\n//   return (\n//     <>\n//       <StyledButton onClickButton={openModal} content={'틱택토 게임'} />\n//       <Modal open={modalOpen} close={closeModal} header='TicTacToe Game'>\n//         <div className='container'>\n//           <table>\n//             Turn : {turn}\n//             <tbody>\n//               <tr>\n//                 <Cell num={0} />\n//                 <Cell num={1} />\n//                 <Cell num={2} />\n//               </tr>\n//               <tr>\n//                 <Cell num={3} />\n//                 <Cell num={4} />\n//                 <Cell num={5} />\n//               </tr>\n//               <tr>\n//                 <Cell num={6} />\n//                 <Cell num={7} />\n//                 <Cell num={8} />\n//               </tr>\n//             </tbody>\n//           </table>\n//           {winner && (\n//             <>\n//               <p>{winner} is the winner!</p>\n//               <button onClick={() => handleRestart()}>Play Again</button>\n//             </>\n//           )}\n//         </div>\n//       </Modal>\n//     </>\n//   );\n// };\nimport React, { useState } from 'react';\nimport './TicTacToe.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TicTacToe = () => {\n  _s();\n\n  const [turn, setTurn] = useState('x');\n  const [cells, setCells] = useState(Array(9).fill(''));\n  const [winner, setWinner] = useState();\n\n  const checkForWinner = squares => {\n    let combos = {\n      across: [[0, 1, 2], [3, 4, 5], [6, 7, 8]],\n      down: [[0, 3, 6], [1, 4, 7], [2, 5, 8]],\n      diagnol: [[0, 4, 8], [2, 4, 6]]\n    };\n\n    for (let combo in combos) {\n      combos[combo].forEach(pattern => {\n        if (squares[pattern[0]] === '' || squares[pattern[1]] === '' || squares[pattern[2]] === '') {// do nothing\n        } else if (squares[pattern[0]] === squares[pattern[1]] && squares[pattern[1]] === squares[pattern[2]]) {\n          setWinner(squares[pattern[0]]);\n        }\n      });\n    }\n  };\n\n  const handleClick = num => {\n    if (cells[num] !== '') {\n      alert('already clicked');\n      return;\n    }\n\n    let squares = [...cells];\n\n    if (turn === 'x') {\n      squares[num] = 'x';\n      setTurn('o');\n    } else {\n      squares[num] = 'o';\n      setTurn('x');\n    }\n\n    checkForWinner(squares);\n    setCells(squares);\n  };\n\n  const handleRestart = () => {\n    setWinner(null);\n    setCells(Array(9).fill(''));\n  };\n\n  const Cell = _ref => {\n    let {\n      num\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(\"td\", {\n      onClick: () => handleClick(num),\n      children: cells[num]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 12\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      children: [\"Turn: \", turn, /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(Cell, {\n            num: 0\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Cell, {\n            num: 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Cell, {\n            num: 2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(Cell, {\n            num: 3\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Cell, {\n            num: 4\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Cell, {\n            num: 5\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(Cell, {\n            num: 6\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Cell, {\n            num: 7\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Cell, {\n            num: 8\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), winner && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [winner, \" is the winner!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleRestart(),\n        children: \"Play Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TicTacToe, \"Z2GZewedcLDMwv9nXO0GaLLqJZM=\");\n\n_c = TicTacToe;\nexport default TicTacToe;\n\nvar _c;\n\n$RefreshReg$(_c, \"TicTacToe\");","map":{"version":3,"names":["React","useState","TicTacToe","turn","setTurn","cells","setCells","Array","fill","winner","setWinner","checkForWinner","squares","combos","across","down","diagnol","combo","forEach","pattern","handleClick","num","alert","handleRestart","Cell"],"sources":["/Users/leezer/Desktop/codeStates/REACT_TYPESCRIPT_STUDY/react-study/src/pages/Tictactoe/Tictactoe.jsx"],"sourcesContent":["// import { useState } from 'react';\n// import { Modal } from '../../components';\n// import { StyledButton } from '../../components';\n// import { createEmptyArray } from '../../utils/utils';\n// import './tictactoe.css';\n\n// export const Tictactoe = () => {\n//   //  Modal related\n//   const [modalOpen, setModalOpen] = useState(false);\n//   const openModal = () => setModalOpen(true);\n//   const closeModal = () => setModalOpen(false);\n\n//   // Game related\n\n//   const [turn, setTurn] = useState('x');\n//   const [cells, setCells] = useState(createEmptyArray(9).fill(''));\n//   const [winner, setWinner] = useState();\n\n//   const decideWinner = (squares) => {\n//     let combos = {\n//       across: [\n//         [0, 1, 2],\n//         [3, 4, 5],\n//         [6, 7, 8],\n//       ],\n//       down: [\n//         [0, 3, 6],\n//         [1, 4, 7],\n//         [2, 5, 8],\n//       ],\n//       diagonal: [\n//         [0, 4, 8],\n//         [2, 4, 6],\n//       ],\n//     };\n\n//     for (let combo in combos) {\n//       combos[combo].forEach((pattern) => {\n//         if (squares[pattern[0]] === '' || squares[pattern[1]] === '' || squares[pattern[2]] === '') {\n//           // do nothing\n//         } else if (squares[pattern[0]] === squares[pattern[1]] && squares[pattern[1]] === squares[pattern[2]]) {\n//           setWinner(squares[pattern[0]]);\n//         }\n//       });\n//     }\n//   };\n\n//   const handleClick = (num) => {\n//     if (cells[num] !== '') {\n//       return;\n//     }\n\n//     let squares = [...cells];\n\n//     // eslint-disable-next-line no-unused-expressions\n//     // turn === 'x' ? ((squares[num] = 'x'), setTurn('o')) : ((squares[num] = 'o'), setTurn('x'));\n\n//     if (turn === 'x') {\n//       squares[num] = 'x';\n//       setTurn('o');\n//     } else {\n//       squares[num] = 'o';\n//       setTurn('x');\n//     }\n\n//     decideWinner(squares);\n//     setCells(squares);\n//   };\n\n//   const handleRestart = () => {\n//     setWinner(null);\n//     setCells(createEmptyArray(9).fill(0));\n//   };\n\n//   const Cell = ({ num }) => {\n//     return <td onClick={() => handleClick(num)}>{cells[num]}</td>;\n//   };\n\n//   return (\n//     <>\n//       <StyledButton onClickButton={openModal} content={'틱택토 게임'} />\n//       <Modal open={modalOpen} close={closeModal} header='TicTacToe Game'>\n//         <div className='container'>\n//           <table>\n//             Turn : {turn}\n//             <tbody>\n//               <tr>\n//                 <Cell num={0} />\n//                 <Cell num={1} />\n//                 <Cell num={2} />\n//               </tr>\n//               <tr>\n//                 <Cell num={3} />\n//                 <Cell num={4} />\n//                 <Cell num={5} />\n//               </tr>\n//               <tr>\n//                 <Cell num={6} />\n//                 <Cell num={7} />\n//                 <Cell num={8} />\n//               </tr>\n//             </tbody>\n//           </table>\n//           {winner && (\n//             <>\n//               <p>{winner} is the winner!</p>\n//               <button onClick={() => handleRestart()}>Play Again</button>\n//             </>\n//           )}\n//         </div>\n//       </Modal>\n//     </>\n//   );\n// };\n\nimport React, { useState } from 'react';\nimport './TicTacToe.css';\n\nconst TicTacToe = () => {\n  const [turn, setTurn] = useState('x');\n  const [cells, setCells] = useState(Array(9).fill(''));\n  const [winner, setWinner] = useState();\n\n  const checkForWinner = (squares) => {\n    let combos = {\n      across: [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n      ],\n      down: [\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n      ],\n      diagnol: [\n        [0, 4, 8],\n        [2, 4, 6],\n      ],\n    };\n\n    for (let combo in combos) {\n      combos[combo].forEach((pattern) => {\n        if (squares[pattern[0]] === '' || squares[pattern[1]] === '' || squares[pattern[2]] === '') {\n          // do nothing\n        } else if (squares[pattern[0]] === squares[pattern[1]] && squares[pattern[1]] === squares[pattern[2]]) {\n          setWinner(squares[pattern[0]]);\n        }\n      });\n    }\n  };\n\n  const handleClick = (num) => {\n    if (cells[num] !== '') {\n      alert('already clicked');\n      return;\n    }\n\n    let squares = [...cells];\n\n    if (turn === 'x') {\n      squares[num] = 'x';\n      setTurn('o');\n    } else {\n      squares[num] = 'o';\n      setTurn('x');\n    }\n\n    checkForWinner(squares);\n    setCells(squares);\n  };\n\n  const handleRestart = () => {\n    setWinner(null);\n    setCells(Array(9).fill(''));\n  };\n\n  const Cell = ({ num }) => {\n    return <td onClick={() => handleClick(num)}>{cells[num]}</td>;\n  };\n\n  return (\n    <div className='container'>\n      <table>\n        Turn: {turn}\n        <tbody>\n          <tr>\n            <Cell num={0} />\n            <Cell num={1} />\n            <Cell num={2} />\n          </tr>\n          <tr>\n            <Cell num={3} />\n            <Cell num={4} />\n            <Cell num={5} />\n          </tr>\n          <tr>\n            <Cell num={6} />\n            <Cell num={7} />\n            <Cell num={8} />\n          </tr>\n        </tbody>\n      </table>\n      {winner && (\n        <>\n          <p>{winner} is the winner!</p>\n          <button onClick={() => handleRestart()}>Play Again</button>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default TicTacToe;\n"],"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"},"metadata":{},"sourceType":"module"}