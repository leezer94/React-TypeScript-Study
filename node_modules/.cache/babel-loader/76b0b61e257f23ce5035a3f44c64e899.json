{"ast":null,"code":"var _jsxFileName = \"/Users/leezer/Desktop/codeStates/REACT_TYPESCRIPT_STUDY/react-study/src/pages/RpsGame/RpsDisplayContainer.jsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { Form, Button, P } from '../../components';\nimport { RPSGAME } from '../../common/constants/constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RpsDisplayContainer = props => {\n  _s();\n\n  const {\n    state,\n    handleState,\n    setScore\n  } = props;\n  let {\n    currentMove\n  } = state;\n  const images = ['✌️', '✊🏻', '🖐🏿'];\n  const [image, setImage] = useState(0); // number\n\n  const [isPlaying, setIsPlaying] = useState(true); // boolean\n\n  const interval = useRef(null);\n\n  const printCurrentMove = () => {\n    // () => string\n    let currentEmoji;\n\n    if (currentMove === RPSGAME.SCISSORS) {\n      currentEmoji = RPSGAME.EMOJIS.SCISSORS;\n    } else if (currentMove === RPSGAME.ROCK) {\n      currentEmoji = RPSGAME.EMOJIS.ROCK;\n    } else if (currentMove === RPSGAME.PAPER) {\n      currentEmoji = RPSGAME.EMOJIS.PAPER;\n    }\n\n    return currentEmoji;\n  };\n\n  const handleHandImage = useCallback(() => {\n    // () => void\n    if (image === images.length - 1) {\n      setImage(0);\n    } else {\n      setImage(image + 1);\n    }\n  }, [image, images.length]);\n  useEffect(() => {\n    interval.current = setInterval(handleHandImage, RPSGAME.DELAY_100);\n    return () => {\n      clearInterval(interval.current);\n    };\n  }, [handleHandImage]);\n\n  const handleGameResult = (currentMove, computerMove) => {\n    console.log(currentMove, computerMove); // currentMove : string\n    // computerMove : string\n    // () => string\n\n    let result = '';\n\n    if (computerMove === images[0]) {\n      if (currentMove === RPSGAME.ROCK) {\n        result = RPSGAME.COMPUTER_WIN;\n      } else if (currentMove === RPSGAME.SCISSORS) {\n        result = RPSGAME.TIE;\n      } else if (currentMove === RPSGAME.PAPER) {\n        result = RPSGAME.USER_WIN;\n      }\n    } else if (computerMove === images[1]) {\n      if (currentMove === RPSGAME.ROCK) {\n        result = RPSGAME.TIE;\n      } else if (currentMove === RPSGAME.SCISSORS) {\n        result = RPSGAME.COMPUTER_WIN;\n      } else if (currentMove === RPSGAME.PAPER) {\n        result = RPSGAME.USER_WIN;\n      }\n    } else if (computerMove === images[2]) {\n      if (currentMove === RPSGAME.ROCK) {\n        result = RPSGAME.COMPUTER_WIN;\n      } else if (currentMove === RPSGAME.SCISSORS) {\n        result = RPSGAME.USER_WIN;\n      } else if (currentMove === RPSGAME.PAPER) {\n        result = RPSGAME.TIE;\n      }\n    }\n\n    if (result === RPSGAME.COMPUTER_WIN) {\n      setScore(score => score - RPSGAME.THRESHOLD_POINT);\n    } else if (result === RPSGAME.USER_WIN) {\n      setScore(score => score + RPSGAME.THRESHOLD_POINT);\n    }\n\n    return result;\n  };\n\n  const onClickHandButton = e => {\n    clearInterval(interval.current);\n    setIsPlaying(!isPlaying);\n    handleState({ ...state,\n      currentMove: e.target.textContent,\n      computerMove: images[image],\n      gameResult: handleGameResult(e.target.textContent, images[image])\n    });\n    interval.current = setInterval(handleHandImage, RPSGAME.DELAY_500);\n  };\n\n  const createRPSButtons = () => {\n    const movementArray = [RPSGAME.SCISSORS, RPSGAME.ROCK, RPSGAME.PAPER];\n    return movementArray.map((el, i) => {\n      return /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        content: el,\n        onClickEvent: onClickHandButton\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 14\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: e => e.preventDefault(),\n    children: [/*#__PURE__*/_jsxDEV(P, {\n      content: 'Computer',\n      style: {\n        color: 'blue',\n        fontWeight: 600\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(P, {\n      content: images[image],\n      style: {\n        fontSize: 80,\n        margin: 10,\n        padding: 0\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), createRPSButtons(), /*#__PURE__*/_jsxDEV(P, {\n      content: 'User',\n      style: {\n        color: 'red',\n        fontWeight: 600\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(P, {\n      content: !currentMove ? '✌️' : printCurrentMove(),\n      style: {\n        fontSize: 80,\n        margin: 10,\n        padding: 0\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RpsDisplayContainer, \"UGpnqmujOhqQaT0suIAWccjPY+g=\");\n\n_c = RpsDisplayContainer;\nexport default RpsDisplayContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"RpsDisplayContainer\");","map":{"version":3,"names":["useCallback","useEffect","useRef","useState","Form","Button","P","RPSGAME","RpsDisplayContainer","props","state","handleState","setScore","currentMove","images","image","setImage","isPlaying","setIsPlaying","interval","printCurrentMove","currentEmoji","SCISSORS","EMOJIS","ROCK","PAPER","handleHandImage","length","current","setInterval","DELAY_100","clearInterval","handleGameResult","computerMove","console","log","result","COMPUTER_WIN","TIE","USER_WIN","score","THRESHOLD_POINT","onClickHandButton","e","target","textContent","gameResult","DELAY_500","createRPSButtons","movementArray","map","el","i","preventDefault","color","fontWeight","fontSize","margin","padding"],"sources":["/Users/leezer/Desktop/codeStates/REACT_TYPESCRIPT_STUDY/react-study/src/pages/RpsGame/RpsDisplayContainer.jsx"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react';\nimport { Form, Button, P } from '../../components';\nimport { RPSGAME } from '../../common/constants/constants';\n\nconst RpsDisplayContainer = (props) => {\n  const { state, handleState, setScore } = props;\n  let { currentMove } = state;\n\n  const images = ['✌️', '✊🏻', '🖐🏿'];\n  const [image, setImage] = useState(0);\n  // number\n\n  const [isPlaying, setIsPlaying] = useState(true);\n  // boolean\n\n  const interval = useRef(null);\n\n  const printCurrentMove = () => {\n    // () => string\n    let currentEmoji;\n\n    if (currentMove === RPSGAME.SCISSORS) {\n      currentEmoji = RPSGAME.EMOJIS.SCISSORS;\n    } else if (currentMove === RPSGAME.ROCK) {\n      currentEmoji = RPSGAME.EMOJIS.ROCK;\n    } else if (currentMove === RPSGAME.PAPER) {\n      currentEmoji = RPSGAME.EMOJIS.PAPER;\n    }\n\n    return currentEmoji;\n  };\n\n  const handleHandImage = useCallback(() => {\n    // () => void\n    if (image === images.length - 1) {\n      setImage(0);\n    } else {\n      setImage(image + 1);\n    }\n  }, [image, images.length]);\n\n  useEffect(() => {\n    interval.current = setInterval(handleHandImage, RPSGAME.DELAY_100);\n\n    return () => {\n      clearInterval(interval.current);\n    };\n  }, [handleHandImage]);\n\n  const handleGameResult = (currentMove, computerMove) => {\n    console.log(currentMove, computerMove);\n    // currentMove : string\n    // computerMove : string\n    // () => string\n    let result = '';\n\n    if (computerMove === images[0]) {\n      if (currentMove === RPSGAME.ROCK) {\n        result = RPSGAME.COMPUTER_WIN;\n      } else if (currentMove === RPSGAME.SCISSORS) {\n        result = RPSGAME.TIE;\n      } else if (currentMove === RPSGAME.PAPER) {\n        result = RPSGAME.USER_WIN;\n      }\n    } else if (computerMove === images[1]) {\n      if (currentMove === RPSGAME.ROCK) {\n        result = RPSGAME.TIE;\n      } else if (currentMove === RPSGAME.SCISSORS) {\n        result = RPSGAME.COMPUTER_WIN;\n      } else if (currentMove === RPSGAME.PAPER) {\n        result = RPSGAME.USER_WIN;\n      }\n    } else if (computerMove === images[2]) {\n      if (currentMove === RPSGAME.ROCK) {\n        result = RPSGAME.COMPUTER_WIN;\n      } else if (currentMove === RPSGAME.SCISSORS) {\n        result = RPSGAME.USER_WIN;\n      } else if (currentMove === RPSGAME.PAPER) {\n        result = RPSGAME.TIE;\n      }\n    }\n\n    if (result === RPSGAME.COMPUTER_WIN) {\n      setScore((score) => score - RPSGAME.THRESHOLD_POINT);\n    } else if (result === RPSGAME.USER_WIN) {\n      setScore((score) => score + RPSGAME.THRESHOLD_POINT);\n    }\n\n    return result;\n  };\n\n  const onClickHandButton = (e) => {\n    clearInterval(interval.current);\n    setIsPlaying(!isPlaying);\n\n    handleState({\n      ...state,\n      currentMove: e.target.textContent,\n      computerMove: images[image],\n      gameResult: handleGameResult(e.target.textContent, images[image]),\n    });\n\n    interval.current = setInterval(handleHandImage, RPSGAME.DELAY_500);\n  };\n\n  const createRPSButtons = () => {\n    const movementArray = [RPSGAME.SCISSORS, RPSGAME.ROCK, RPSGAME.PAPER];\n\n    return movementArray.map((el, i) => {\n      return <Button type='submit' key={i} content={el} onClickEvent={onClickHandButton} />;\n    });\n  };\n\n  return (\n    <Form onSubmit={(e) => e.preventDefault()}>\n      <P content={'Computer'} style={{ color: 'blue', fontWeight: 600 }} />\n      <P content={images[image]} style={{ fontSize: 80, margin: 10, padding: 0 }} />\n      {createRPSButtons()}\n      <P content={'User'} style={{ color: 'red', fontWeight: 600 }} />\n      <P content={!currentMove ? '✌️' : printCurrentMove()} style={{ fontSize: 80, margin: 10, padding: 0 }} />\n    </Form>\n  );\n};\n\nexport default RpsDisplayContainer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}