{"ast":null,"code":"export var isValidInputWord=function isValidInputWord(errorMessage){var isValid=false;if(!errorMessage){isValid=true;}return isValid;};// here needs to be fixed\nexport var isValidNumberTypeInput=function isValidNumberTypeInput(input,sum,type){var inputValue=input.current.value;var isValid=false;if(!isNaN(inputValue)&&sum===type(inputValue)){isValid=true;}return isValid;};// here needs to be fixed\nexport var getErrorMessages=function getErrorMessages(input,tryLog,lengthOfArray){var inputValue=input.current.value;var inputValueArr=inputValue.split('').map(Number);var messageList=new Set();if(inputValueArr.length!==lengthOfArray){messageList.add(\"\".concat(lengthOfArray,\"\\uC790\\uB9AC \\uC218\\uB97C \\uC785\\uB825\\uD574 \\uC8FC\\uC138\\uC694.\"));}if(inputValueArr.includes(0)){messageList.add('1 ~ 9 사이의 수만 입력이 가능합니다.');}if(new Set(inputValueArr).size!==lengthOfArray&&new Set(inputValueArr).size<lengthOfArray){messageList.add('중복되지 않는 수를 입력해 주세요.');}if(inputValueArr.some(isNaN)){messageList.add('숫자만 입력이 가능합니다.');}if(tryLog.includes(inputValue)){messageList.add('이미 입력했던 숫자 입니다.');}return messageList;};","map":{"version":3,"names":["isValidInputWord","errorMessage","isValid","isValidNumberTypeInput","input","sum","type","inputValue","current","value","isNaN","getErrorMessages","tryLog","lengthOfArray","inputValueArr","split","map","Number","messageList","Set","length","add","includes","size","some"],"sources":["/Users/leezer/Desktop/codeStates/REACT_TYPESCRIPT_STUDY/react-study/src/utils/validator.tsx"],"sourcesContent":["export const isValidInputWord = (errorMessage: any) => {\n  let isValid = false;\n\n  if (!errorMessage) {\n    isValid = true;\n  }\n\n  return isValid;\n};\n\n// here needs to be fixed\nexport const isValidNumberTypeInput = (input: any, sum: number, type: any) => {\n  const inputValue = input.current.value;\n\n  let isValid = false;\n\n  if (!isNaN(inputValue) && sum === type(inputValue)) {\n    isValid = true;\n  }\n\n  return isValid;\n};\n\n// here needs to be fixed\nexport const getErrorMessages = (input: any, tryLog: number[], lengthOfArray: number) => {\n  const inputValue: any = input.current.value;\n  const inputValueArr: number[] = inputValue.split('').map(Number);\n\n  const messageList = new Set();\n\n  if (inputValueArr.length !== lengthOfArray) {\n    messageList.add(`${lengthOfArray}자리 수를 입력해 주세요.`);\n  }\n\n  if (inputValueArr.includes(0)) {\n    messageList.add('1 ~ 9 사이의 수만 입력이 가능합니다.');\n  }\n\n  if (new Set(inputValueArr).size !== lengthOfArray && new Set(inputValueArr).size < lengthOfArray) {\n    messageList.add('중복되지 않는 수를 입력해 주세요.');\n  }\n\n  if (inputValueArr.some(isNaN)) {\n    messageList.add('숫자만 입력이 가능합니다.');\n  }\n\n  if (tryLog.includes(inputValue)) {\n    messageList.add('이미 입력했던 숫자 입니다.');\n  }\n\n  return messageList;\n};\n"],"mappings":"AAAA,MAAO,IAAMA,iBAAgB,CAAG,QAAnBA,iBAAmB,CAACC,YAAD,CAAuB,CACrD,GAAIC,QAAO,CAAG,KAAd,CAEA,GAAI,CAACD,YAAL,CAAmB,CACjBC,OAAO,CAAG,IAAV,CACD,CAED,MAAOA,QAAP,CACD,CARM,CAUP;AACA,MAAO,IAAMC,uBAAsB,CAAG,QAAzBA,uBAAyB,CAACC,KAAD,CAAaC,GAAb,CAA0BC,IAA1B,CAAwC,CAC5E,GAAMC,WAAU,CAAGH,KAAK,CAACI,OAAN,CAAcC,KAAjC,CAEA,GAAIP,QAAO,CAAG,KAAd,CAEA,GAAI,CAACQ,KAAK,CAACH,UAAD,CAAN,EAAsBF,GAAG,GAAKC,IAAI,CAACC,UAAD,CAAtC,CAAoD,CAClDL,OAAO,CAAG,IAAV,CACD,CAED,MAAOA,QAAP,CACD,CAVM,CAYP;AACA,MAAO,IAAMS,iBAAgB,CAAG,QAAnBA,iBAAmB,CAACP,KAAD,CAAaQ,MAAb,CAA+BC,aAA/B,CAAyD,CACvF,GAAMN,WAAe,CAAGH,KAAK,CAACI,OAAN,CAAcC,KAAtC,CACA,GAAMK,cAAuB,CAAGP,UAAU,CAACQ,KAAX,CAAiB,EAAjB,EAAqBC,GAArB,CAAyBC,MAAzB,CAAhC,CAEA,GAAMC,YAAW,CAAG,GAAIC,IAAJ,EAApB,CAEA,GAAIL,aAAa,CAACM,MAAd,GAAyBP,aAA7B,CAA4C,CAC1CK,WAAW,CAACG,GAAZ,WAAmBR,aAAnB,sEACD,CAED,GAAIC,aAAa,CAACQ,QAAd,CAAuB,CAAvB,CAAJ,CAA+B,CAC7BJ,WAAW,CAACG,GAAZ,CAAgB,yBAAhB,EACD,CAED,GAAI,GAAIF,IAAJ,CAAQL,aAAR,EAAuBS,IAAvB,GAAgCV,aAAhC,EAAiD,GAAIM,IAAJ,CAAQL,aAAR,EAAuBS,IAAvB,CAA8BV,aAAnF,CAAkG,CAChGK,WAAW,CAACG,GAAZ,CAAgB,qBAAhB,EACD,CAED,GAAIP,aAAa,CAACU,IAAd,CAAmBd,KAAnB,CAAJ,CAA+B,CAC7BQ,WAAW,CAACG,GAAZ,CAAgB,gBAAhB,EACD,CAED,GAAIT,MAAM,CAACU,QAAP,CAAgBf,UAAhB,CAAJ,CAAiC,CAC/BW,WAAW,CAACG,GAAZ,CAAgB,iBAAhB,EACD,CAED,MAAOH,YAAP,CACD,CA3BM"},"metadata":{},"sourceType":"module"}